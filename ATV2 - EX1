interface Cafe {
    void preparar();
}

class CafeBasico implements Cafe {
    @Override
    public void preparar() {
        System.out.println("Preparando café básico.");
    }
}

abstract class DecoradorCafe implements Cafe {
    protected Cafe cafeDecorado;

    public DecoradorCafe(Cafe cafeDecorado) {
        this.cafeDecorado = cafeDecorado;
    }

    @Override
    public void preparar() {
        cafeDecorado.preparar();
    }
}

class LeiteDecorator extends DecoradorCafe {
    public LeiteDecorator(Cafe cafeDecorado) {
        super(cafeDecorado);
    }

    @Override
    public void preparar() {
        super.preparar();
        adicionarLeite();
    }

    private void adicionarLeite() {
        System.out.println("Adicionando leite ao café.");
    }
}

class AcucarDecorator extends DecoradorCafe {
    public AcucarDecorator(Cafe cafeDecorado) {
        super(cafeDecorado);
    }

    @Override
    public void preparar() {
        super.preparar();
        adicionarAcucar();
    }

    private void adicionarAcucar() {
        System.out.println("Adicionando açúcar ao café.");
    }
}

class ChocolateDecorator extends DecoradorCafe {
    public ChocolateDecorator(Cafe cafeDecorado) {
        super(cafeDecorado);
    }

    @Override
    public void preparar() {
        super.preparar();
        adicionarChocolate();
    }

    private void adicionarChocolate() {
        System.out.println("Adicionando chocolate ao café.");
    }
}

class ChantillyDecorator extends DecoradorCafe {
    public ChantillyDecorator(Cafe cafeDecorado) {
        super(cafeDecorado);
    }

    @Override
    public void preparar() {
        super.preparar();
        adicionarChantilly();
    }

    private void adicionarChantilly() {
        System.out.println("Adicionando chantilly ao café.");
    }
}

public class ExemploCafeDecorator {
    public static void main(String[] args) {
        Cafe cafeBasico = new CafeBasico();
        Cafe cafeComLeite = new LeiteDecorator(cafeBasico);
        Cafe cafeComAcucar = new AcucarDecorator(cafeComLeite);
        Cafe cafeComChocolateEChantilly = new ChantillyDecorator(new ChocolateDecorator(cafeComAcucar));

        System.out.println("Café Básico:");
        cafeBasico.preparar();

        System.out.println("\nCafé com Leite:");
        cafeComLeite.preparar();

        System.out.println("\nCafé com Açúcar:");
        cafeComAcucar.preparar();

        System.out.println("\nCafé com Chocolate e Chantilly:");
        cafeComChocolateEChantilly.preparar();
    }
}
