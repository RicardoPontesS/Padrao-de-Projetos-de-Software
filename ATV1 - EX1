import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

interface ObservadorCliques {
    void onContagemCliquesAlterada(int novaContagemCliques);
}

class ContadorCliques {
    private int contagemCliques = 0;
    private List<ObservadorCliques> observadores = new ArrayList<>();

    public void adicionarObservador(ObservadorCliques observador) {
        observadores.add(observador);
    }

    public void removerObservador(ObservadorCliques observador) {
        observadores.remove(observador);
    }

    public void incrementarContagemCliques() {
        contagemCliques++;
        notificarObservadores();
    }

    public int getContagemCliques() {
        return contagemCliques;
    }

    private void notificarObservadores() {
        for (ObservadorCliques observador : observadores) {
            observador.onContagemCliquesAlterada(contagemCliques);
        }
    }
}

class ObservadorCliquesImpl implements ObservadorCliques {
    @Override
    public void onContagemCliquesAlterada(int novaContagemCliques) {
        System.out.println("Número de cliques alterado para: " + novaContagemCliques);
    }
}

public class ExemploContadorCliques {
    public static void main(String[] args) {
        ContadorCliques contadorCliques = new ContadorCliques();
        ObservadorCliques observador = new ObservadorCliquesImpl();

        contadorCliques.adicionarObservador(observador);

        for (int i = 0; i < 5; i++) {
            contadorCliques.incrementarContagemCliques();
        }

        // Remove o observador
        contadorCliques.removerObservador(observador);

        // Simula mais alguns cliques (o observador removido não será notificado)
        for (int i = 0; i < 3; i++) {
            contadorCliques.incrementarContagemCliques();
        }
    }
}
